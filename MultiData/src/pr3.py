import pandas as pd
import numpy as np
import os

# –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å
tasks = [
    {'name': 'task0', 'filename': 'pr3_task0_data.csv'},
    {'name': 'task1', 'filename': 'pr3_task1_data.csv'},
    {'name': 'task2', 'filename': 'pr3_task2_data.csv'},
    {'name': 'task3', 'filename': 'pr3_task3_data.csv'},
    {'name': 'task4', 'filename': 'pr3_task4_data.csv'},
    {'name': 'task5', 'filename': 'pr3_task5_data.csv'},
]

for task in tasks:
    print(f"\nüîÑ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–¥–∞–Ω–Ω—è pr3_{task['name']}")

    # –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
    data_path = os.path.join('data', task['filename'])
    result_path = os.path.join('results', f"pr3_{task['name']}_discriminant_analysis.md")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    df = pd.read_csv(data_path)

    # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –∫–ª–∞—Å–∏
    class_A = df[df['Class'] == 'A'][['X1', 'X2', 'X3']].values
    class_B = df[df['Class'] == 'B'][['X1', 'X2', 'X3']].values
    Z = df[df['Class'].str.startswith('Z')][['ID', 'X1', 'X2', 'X3']]

    # –°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    mean_A = np.mean(class_A, axis=0)
    mean_B = np.mean(class_B, axis=0)

    # –ö–æ–≤–∞—Ä—ñ–∞—Ü—ñ–π–Ω—ñ –º–∞—Ç—Ä–∏—Ü—ñ (–∑–º—ñ—â–µ–Ω—ñ, —è–∫ —É –º–µ—Ç–æ–¥–∏—á—Ü—ñ)
    cov_A = np.round(np.cov(class_A, rowvar=False, bias=True), 5)
    cov_B = np.round(np.cov(class_B, rowvar=False, bias=True), 5)

    # –ü—É–ª—ñ–Ω–≥–æ–≤–∞ –º–∞—Ç—Ä–∏—Ü—è (–Ω–µ–∑–º—ñ—â–µ–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Å—É–º–∞—Ä–Ω–æ—ó –∫–æ–≤–∞—Ä—ñ–∞—Ü—ñ–π–Ω–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ)
    n1, n2 = len(class_A), len(class_B)
    pooled_cov = (n1 * cov_A + n2 * cov_B) / (n1 + n2 - 2)

    # –ó–≤–æ—Ä–æ—Ç–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è
    inv_cov = np.linalg.inv(pooled_cov)

    # –í–µ–∫—Ç–æ—Ä –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—ó
    a = inv_cov @ (mean_A - mean_B)

    # –î–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
    scores_A = [x @ a for x in class_A]
    scores_B = [x @ a for x in class_B]

    # –¶–µ–Ω—Ç—Ä–∏ –∫–ª–∞—Å—ñ–≤
    Ux = mean_A @ a
    Uy = mean_B @ a
    C = (Ux + Uy) / 2

    # –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è Z1, Z2, ...
    results = []
    for _, row in Z.iterrows():
        features = np.array([row['X1'], row['X2'], row['X3']])
        score = features @ a
        predicted_class = 'A' if score > C else 'B'
        results.append({
            'ID': int(row['ID']),
            'Score': round(score, 4),
            'Threshold': round(C, 4),
            'Predicted_Class': predicted_class
        })

    # –ö—Ä–∏—Ç–µ—Ä—ñ–π Œª –£—ó–ª–∫—Å–∞
    global_mean = (n1 * mean_A + n2 * mean_B) / (n1 + n2)

    Qsw = np.sum((class_A - mean_A)**2) + np.sum((class_B - mean_B)**2)
    Qsb = n1 * np.sum((mean_A - global_mean)**2) + n2 * np.sum((mean_B - global_mean)**2)

    wilks_lambda = Qsb / Qsw
    Lw = 1 / (1 + wilks_lambda)

    # –í–ø–ª–∏–≤ –æ–∑–Ω–∞–∫
    abs_a = np.abs(a)
    R = abs_a / np.sum(abs_a)
    R_percent = np.round(R * 100, 2)

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
    with open(result_path, 'w', encoding='utf-8') as f:
        f.write(f"# –ü—Ä–∞–∫—Ç–∏—á–Ω–∞ 3 ‚Äî –î–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ({task['name']})\n\n")
        f.write(f"## 1. –°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –æ–∑–Ω–∞–∫\n\n")
        f.write(f"| –û–∑–Ω–∞–∫–∞ | –ö–ª–∞—Å A (XÃÑ) | –ö–ª–∞—Å B (YÃÑ) |\n|--------|-------------|-------------|\n")
        for i, label in enumerate(['X1', 'X2', 'X3']):
            f.write(f"| {label} | {mean_A[i]:.2f} | {mean_B[i]:.2f} |\n")

        f.write(f"\n## 2. –ö–æ–≤–∞—Ä—ñ–∞—Ü—ñ–π–Ω—ñ –º–∞—Ç—Ä–∏—Ü—ñ\n\n**Sx:**\n```\n{cov_A}\n```\n**Sy:**\n```\n{cov_B}\n```\n")
        f.write(f"\n## 3. –ü—É–ª—ñ–Ω–≥–æ–≤–∞ –º–∞—Ç—Ä–∏—Ü—è (–Ω–µ–∑–º—ñ—â–µ–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Å—É–º–∞—Ä–Ω–æ—ó –∫–æ–≤–∞—Ä—ñ–∞—Ü—ñ–π–Ω–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ)\n```\n{np.round(pooled_cov, 5)}\n```\n")
        f.write(f"\n## 4. –ó–≤–æ—Ä–æ—Ç–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è\n```\n{np.round(inv_cov, 4)}\n```\n")
        f.write(f"\n## 5. –í–µ–∫—Ç–æ—Ä –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—ó\n```\n{np.round(a, 4)}\n```\n")

        f.write(f"\n## 6. –û—Ü—ñ–Ω–∫–∏ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤\n\n")
        f.write(f"| ID | –ö–ª–∞—Å | –û—Ü—ñ–Ω–∫–∞ U |\n|----|------|-----------|\n")
        for i, score in enumerate(scores_A):
            f.write(f"| {i+1} | A | {score:.4f} |\n")
        for i, score in enumerate(scores_B):
            f.write(f"| {i+5} | B | {score:.4f} |\n")

        f.write(f"\n**Ux = {Ux:.4f}**, **Uy = {Uy:.4f}**, **C = {C:.4f}**\n")

        f.write(f"\n## 7. –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è\n\n")
        f.write(f"| ID | X1 | X2 | X3 | Uz | –ö–ª–∞—Å |\n|----|----|----|----|------|------|\n")
        for row in results:
            z_row = Z[Z['ID'] == row['ID']].iloc[0]
            f.write(f"| {row['ID']} | {z_row['X1']} | {z_row['X2']} | {z_row['X3']} | {row['Score']} | {row['Predicted_Class']} |\n")

        f.write(f"\n## 8. –ö—Ä–∏—Ç–µ—Ä—ñ–π Œª –£—ó–ª–∫—Å–∞\n\n")
        f.write(f"- –í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥—Ä—É–ø–æ–≤–∞ –≤–∞—Ä—ñ–∞—Ü—ñ—è (Qsw): {Qsw:.4f}\n")
        f.write(f"- –ú—ñ–∂–≥—Ä—É–ø–æ–≤–∞ –≤–∞—Ä—ñ–∞—Ü—ñ—è (Qsb): {Qsb:.4f}\n")
        f.write(f"- Œª –£—ó–ª–∫—Å–∞: {wilks_lambda:.4f}\n")
        f.write(f"- Lw: {Lw:.4f}\n")
        f.write(f"\n## 9. –í–ø–ª–∏–≤ –æ–∑–Ω–∞–∫ –Ω–∞ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—é\n\n")
        f.write(f"| –û–∑–Ω–∞–∫–∞ | –í–ø–ª–∏–≤ (%) |\n|--------|------------|\n")
        for i, label in enumerate(['X1', 'X2', 'X3']):
            f.write(f"| {label} | {R_percent[i]:.2f} |\n")

        f.write(f"\n**–ù–∞–π–±—ñ–ª—å—à–∏–π –≤–Ω–µ—Å–æ–∫:** {['X1','X2','X3'][np.argmax(R_percent)]} ‚Äî {np.max(R_percent):.2f}%\n")

    print(f"‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É: {result_path}")